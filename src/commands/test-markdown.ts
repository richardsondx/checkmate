/**
 * Test Markdown Generation Command
 * 
 * Command for testing Markdown generation functionality with
 * sample output and validation
 */
import * as fs from 'node:fs';
import * as path from 'node:path';
import chalk from 'chalk';
import { validateBasicSyntax, validateCodeBlocks, validateLinks, validateTables, validateNestedStructures, MarkdownSpec, verifySpecCompliance } from '../lib/markdown-validator.js';

// Interface for command options
interface TestMarkdownOptions {
  output?: string;
  verbose?: boolean;
  validate?: boolean;
  format?: string;
  input?: string;
}

/**
 * Generate a sample Markdown document with various elements
 */
function generateSampleMarkdown(): string {
  return `# Sample Markdown Document

## Introduction

This is a sample Markdown document that demonstrates various Markdown features and elements.
It was generated by the CheckMate test-markdown command.

## Headings

### Level 3 Heading
#### Level 4 Heading
##### Level 5 Heading

## Text Formatting

*Italic text* or _also italic_

**Bold text** or __also bold__

***Bold and italic*** text can be combined

~~Strikethrough~~ text uses tilde characters

\`Inline code\` is wrapped in backticks

## Lists

### Unordered Lists

- Item 1
- Item 2
  - Nested item 2.1
  - Nested item 2.2
- Item 3

### Ordered Lists

1. First item
2. Second item
   1. Nested item 2.1
   2. Nested item 2.2
3. Third item

### Task Lists

- [x] Completed task
- [ ] Incomplete task
- [ ] Another task

## Code Blocks

\`\`\`javascript
function helloWorld() {
  console.log("Hello, world!");
  return true;
}
\`\`\`

## Tables

| Header 1 | Header 2 | Header 3 |
|----------|:--------:|---------:|
| Default  | Centered | Right    |
| aligned  | aligned  | aligned  |
| text     | text     | text     |

## Links

[CheckMate Repository](https://github.com/yourusername/checkmateai)

## Blockquotes

> This is a blockquote
> 
> It can span multiple lines
>
> > And can be nested

## Horizontal Rule

---

## Conclusions

This document demonstrates the core Markdown elements supported by CheckMate.

`;
}

/**
 * Run the test-markdown command
 */
export async function testMarkdown(options: TestMarkdownOptions = {}): Promise<void> {
  try {
    console.log(chalk.cyan('üß™ Testing Markdown generation...'));
    
    // Generate or read markdown
    let markdown: string;
    if (options.input) {
      // Read from input file
      try {
        const inputPath = path.resolve(options.input);
        markdown = fs.readFileSync(inputPath, 'utf8');
        console.log(chalk.cyan(`Using Markdown from: ${inputPath}`));
      } catch (err: any) {
        throw new Error(`Failed to read input file: ${err.message}`);
      }
    } else {
      // Generate sample markdown
      markdown = generateSampleMarkdown();
    }
    
    // Validate the generated markdown if requested
    if (options.validate !== false) {
      console.log(chalk.yellow('\nValidating Markdown:'));
      
      // Determine which spec format to validate against
      let specFormat = MarkdownSpec.GFM;
      if (options.format === 'commonmark') {
        specFormat = MarkdownSpec.COMMONMARK;
      } else if (options.format === 'checkmate') {
        specFormat = MarkdownSpec.CHECKMATE;
      }
      
      // Run validation
      const validationResult = verifySpecCompliance(markdown, specFormat);
      
      if (validationResult.valid) {
        console.log(chalk.green('‚úÖ Markdown validation passed'));
      } else {
        console.log(chalk.red(`‚ùå Markdown validation failed with ${validationResult.errors.length} issues:`));
        
        // Show detailed errors in verbose mode
        if (options.verbose) {
          validationResult.errors.forEach(error => {
            console.log(chalk.red(`  - Line ${error.line}, Col ${error.column}: ${error.message} [${error.rule}]`));
          });
        } else {
          // Show summary in non-verbose mode
          console.log(chalk.yellow(`  Run with --verbose to see detailed errors`));
        }
        
        // Intentionally throw error to trigger non-zero exit code
        throw new Error(`Markdown validation failed with ${validationResult.errors.length} issues`);
      }
    }
    
    // Output the markdown
    if (options.output) {
      // Write to file
      const outputPath = path.resolve(options.output);
      fs.writeFileSync(outputPath, markdown, 'utf8');
      console.log(chalk.green(`\nMarkdown saved to: ${outputPath}`));
    } else if (!options.input || !options.validate) {
      // Don't print if we're just validating an input file
      console.log(chalk.white('\nGenerated Markdown:'));
      console.log(chalk.white('='.repeat(80)));
      console.log(markdown);
      console.log(chalk.white('='.repeat(80)));
    }
    
    console.log(chalk.green('‚úÖ Markdown generation test completed successfully'));
    return; // Success exit
  } catch (error: any) {
    // Provide descriptive error message and non-zero exit code
    const errorMessage = error.message || 'Unknown error';
    console.error(chalk.red(`\n‚ùå Error: ${errorMessage}`));
    process.exit(1); // Non-zero exit code on error
  }
} 