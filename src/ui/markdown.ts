/**
 * Markdown utilities for CheckMate CLI
 * Provides functions for generating formatted Markdown output
 */

/**
 * Creates a two-column Markdown table from a 2D array of data
 * 
 * @param data 2D array where first row is header, second row is alignment, and rest are data
 * @returns Formatted Markdown table as a string
 */
export function createTwoColumnMarkdownTable(data: string[][]): string {
  if (!data || data.length < 2) {
    return '';
  }
  
  const rows = [];
  
  // Process each row
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const formattedRow = `| ${row.join(' | ')} |`;
    rows.push(formattedRow);
  }
  
  return rows.join('\n');
}

/**
 * Creates a simple Markdown list from an array of strings
 * 
 * @param items Array of list items
 * @param ordered Whether to create an ordered (numbered) list
 * @returns Formatted Markdown list as a string
 */
export function createMarkdownList(items: string[], ordered: boolean = false): string {
  if (!items || items.length === 0) {
    return '';
  }
  
  return items
    .map((item, index) => ordered ? `${index + 1}. ${item}` : `- ${item}`)
    .join('\n');
}

/**
 * Convert a raw string to a Markdown code block with specified language
 * 
 * @param code The code to format
 * @param language The language for syntax highlighting
 * @returns Formatted Markdown code block
 */
export function createCodeBlock(code: string, language: string = ''): string {
  return `\`\`\`${language}\n${code}\n\`\`\``;
}

/**
 * Format key-value pairs as a Markdown definition list
 * 
 * @param items Object containing key-value pairs
 * @returns Formatted Markdown definition list
 */
export function createDefinitionList(items: Record<string, string>): string {
  return Object.entries(items)
    .map(([key, value]) => `**${key}**: ${value}`)
    .join('\n\n');
}

/**
 * Escape special Markdown characters in a string
 * 
 * @param text Text to escape
 * @returns Escaped text safe for Markdown
 */
export function escapeMarkdown(text: string): string {
  return text
    .replace(/\*/g, '\\*')
    .replace(/_/g, '\\_')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/\#/g, '\\#')
    .replace(/\>/g, '\\>')
    .replace(/\-/g, '\\-')
    .replace(/\+/g, '\\+')
    .replace(/\`/g, '\\`')
    .replace(/\|/g, '\\|');
}

/**
 * Format a timestamp as a Markdown footer
 * 
 * @param message Optional message to include
 * @returns Formatted Markdown footer with timestamp
 */
export function createTimestampFooter(message?: string): string {
  const timestamp = new Date().toISOString();
  const footer = `*Generated by CheckMate on ${timestamp}*`;
  
  if (message) {
    return `${footer}\n\n*${message}*`;
  }
  
  return footer;
} 