---
description: Provides a structured workflow for validating features using CheckMate. Use when needing to validate a feature's implementation against its specifications.
globs: 
alwaysApply: false
---
# CheckMate Feature Validation Workflow

This rule enforces a standard workflow when asked to use CheckMate to validate that a feature is working correctly.

```rule type=information
- When validating a feature with CheckMate, follow this workflow:
  1. Check if a spec exists for the feature being validated
  2. If no spec exists, suggest creating one and wait for user confirmation
  3. Create the spec in checkmate/specs/ directory (NOT in root)
  4. Use the verify-llm-reasoning command to verify implementation against spec checks
  5. If verification fails, attempt fixes until reaching max_attempts (from .checkmate)
  6. Report final status with detailed breakdown of passing and failing checks

- Feature spec location rules:
  - All CheckMate specs MUST be stored in the checkmate/specs/ directory
  - Specs should use kebab-case for filenames (e.g., feature-name.md)
  - Agent specs should be placed in checkmate/specs/agents/ subdirectory

- Auto-fix enforcement rules:
  - When a feature verification FAILS, ALWAYS continue fixing until max_attempts is reached
  - Track fix attempts with a counter and continue until max_attempts (5 by default)
  - Each fix attempt should address specific failing checks with targeted changes
  - After each fix attempt, rerun verify-llm-reasoning to check if the check now passes
  - Only stop fixing when either all checks PASS or max_attempts is reached
```
