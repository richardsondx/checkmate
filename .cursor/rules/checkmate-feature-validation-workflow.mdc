---
description: 
globs: 
alwaysApply: false
---
# CheckMate ¬∑ LLM-Driven TDD Workflow

This rule initiates the LLM-driven Test-Driven Development workflow using CheckMate's spec files.

```rule type=activation
activationTrigger:
  event: command
  pattern: "(\\\\checkmate-tdd|/checkmate-tdd) (\\S+)"
  maxRuns: 1
```

```rule type=on_activation
# LLM-Driven TDD Workflow
SPEC_SLUG=$MATCH_2  # Extract the spec slug from the command

echo "üß™ Starting CheckMate LLM-Driven TDD Workflow for spec: $SPEC_SLUG"

# Check if the spec exists
if [ ! -f "checkmate/specs/$SPEC_SLUG.md" ] && [ ! -f "checkmate/specs/$SPEC_SLUG.yaml" ]; then
  # Try to find the spec with fuzzy matching
  SPEC_PATH=$(node ./dist/index.js status --target "$SPEC_SLUG" --json 2>/dev/null | grep -o '"path":"[^"]*"' | grep -o '[^"]*$')
  
  if [ -z "$SPEC_PATH" ]; then
    echo "‚ùå Spec '$SPEC_SLUG' not found. Please check that it exists or run 'checkmate warmup' to generate specs."
    exit 1
  fi
else
  # Use the provided slug
  if [ -f "checkmate/specs/$SPEC_SLUG.md" ]; then
    SPEC_PATH="checkmate/specs/$SPEC_SLUG.md"
  else
    SPEC_PATH="checkmate/specs/$SPEC_SLUG.yaml"
  fi
fi

# Get check items from the spec
echo "üìã Retrieving check items from spec: $SPEC_PATH"
CHECK_ITEMS=$(node ./dist/index.js list-checks --spec "$SPEC_PATH" --format json --quiet)

# Check if there was an error retrieving check items
if [[ "$CHECK_ITEMS" == *"error"* ]]; then
  echo "‚ùå Error retrieving check items: $CHECK_ITEMS"
  exit 1
fi

# Extract check IDs and text to pass to Cursor
echo "üîç Found check items to validate:"
echo "$CHECK_ITEMS" | grep -o '"id":"[^"]*","text":"[^"]*"' | while read -r check; do
  ID=$(echo "$check" | grep -o '"id":"[^"]*"' | grep -o '[^"]*$')
  TEXT=$(echo "$check" | grep -o '"text":"[^"]*"' | grep -o '[^"]*$')
  
  # Prepare prompt for Cursor
  echo "üß™ Check #$ID: $TEXT"
done

# Now hand off to cursor with these instructions
echo "üìù INSTRUCTIONS FOR CURSOR:"
echo "---"
echo "1. For each check item above, you must:"
echo "   a. Define explicit success and failure conditions"
echo "   b. Examine the codebase to verify if it meets your conditions"
echo "   c. Report your findings as an outcome report"
echo "   d. Call \`checkmate verify-llm-reasoning\` to validate your reasoning"
echo "2. Example usage:"
echo "   \`checkmate verify-llm-reasoning --spec $SPEC_SLUG --check-id [ID] \\"
echo "      --success-condition \"Database password is securely hashed with bcrypt\" \\"
echo "      --failure-condition \"Password is stored in plaintext\" \\"
echo "      --outcome-report \"Found bcrypt hash implementation in user.js line 42\"\`"
echo "3. Continue until all checks have been verified"
echo "---"
echo "üöÄ Now Cursor AI will proceed with the LLM-Driven TDD workflow..."

# Exit with success - Cursor will now take over
exit 0
