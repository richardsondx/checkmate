---
description: Provides a structured workflow for validating features using CheckMate. Use when needing to validate a feature's implementation against its specifications.
globs: 
alwaysApply: false
---
# CheckMate Feature Validation Workflow

This rule enforces a standard workflow when asked to use CheckMate to validate that a feature is working correctly.

## WHAT IS CHECKMATE? - CRITICAL TO UNDERSTAND

CheckMate is a TESTING TOOL, not merely a documentation or tracking tool. Its primary purpose is to actively verify and test feature functionality through actual verification commands, not through manual status updates or documentation reviews.

The ONLY correct way to verify a feature is through the `verify-llm-reasoning` command with all required parameters, running it for EACH check individually. Status checks or manual updates are NOT verification.

## CRITICAL INSTRUCTIONS - MUST FOLLOW EXACTLY

‚ö†Ô∏è CRITICAL: When validating a feature with CheckMate, you MUST follow this workflow EXACTLY. DO NOT:
- Skip any steps in the workflow
- Create your own validation methodology
- Mark checks as passing without verification
- Use unsupported commands or parameters
- Update spec files manually without using the proper commands
- Reference or rely on previous verification results from checkmate-results.md or any other document
- Assume a feature works based on historical documentation without fresh verification
- Shortcut the verification process with results from previous runs
- Use `checkmate status` results as a substitute for proper verification
- Claim a feature is passing because previous runs showed it passing
- Manually read and edit spec files to update checkboxes
- Edit files to match what 'checkmate status' says without running verification
- Claim verification success before executing the actual verification commands
- Respond to verification requests using only `checkmate status` without running the verify-llm-reasoning command

‚ö†Ô∏è STRICTLY PROHIBITED BEHAVIOR (NEVER DO THIS):
```
# DO NOT DO THIS - Running status and claiming it's verification
checkmate status find-by-issues
checkmate status find-by-repositories

Both features have been successfully verified with CheckMate...
```

```
# DO NOT DO THIS - Manual editing is not verification
Read file: checkmate/specs/find-by-issues.md
Read file: checkmate/specs/find-by-repositories.md

I see that the checkboxes in the actual files still show as unchecked `[ ]` even though CheckMate status 
shows them as passing. Let me update both files to make the checkboxes checked...

Edit file: checkmate/specs/find-by-issues.md
Edit file: checkmate/specs/find-by-repositories.md
```

```
# DO NOT DO THIS - Using "I'll verify" but only running status
I'll verify the "Find by Issues" and "Find by Repositories" features using CheckMate:

checkmate status find-by-issues
checkmate status find-by-repositories

Based on the CheckMate verification, both features are fully functional...
```

## EXPLICIT VERIFICATION COMMANDS

The ONLY valid verification command for CheckMate feature verification is:
```bash
# Correct verification command - MUST be run for EACH check individually
checkmate verify-llm-reasoning --spec "feature-name" --check-id "check-number" --success-condition "condition" --failure-condition "condition" --outcome-report "report"
```

NOTE: Using `checkmate status` to understand the current state of checks is allowed, but you MUST NEVER:
1. Treat `checkmate status` results as a substitute for proper verification
2. Skip the verification workflow because `checkmate status` shows passing checks
3. Base verification conclusions solely on `checkmate status` output
4. Edit files manually to match what `checkmate status` reports

You MUST ALWAYS perform a complete, fresh verification from scratch regardless of any previous verification history.
When asked to verify a feature, you MUST execute the ENTIRE workflow even if checks appear to be already passing.

Only the standardized validation process with verification through `verify-llm-reasoning` and proper üü©/üü• indicators is acceptable.

## REQUIRED RESPONSE FORMAT

All verification responses MUST include:
1. Actual test outputs from running the verify-llm-reasoning command
2. Individual check results with üü©/üü• indicators
3. Overall summary showing passing vs. failing checks
4. No verification claims unless verification commands were actually run

```rule type=information
## MANDATORY WORKFLOW - STRICTLY FOLLOW IN ORDER

### Primary Validation Workflow 
You MUST follow these steps in order:
0. Reset any previous verification state using the `checkmate reset` command
   - Always reset before verification to ensure tests start from a clean state
   - Reset all check marks to unchecked state using `sed` if needed
   - Never skip this step, even if all checks appear to be passing already
   
1. Check if a spec exists for the feature being validated
   - Use `find checkmate/specs -name "*feature-name*.md"` to locate spec files
   - If multiple specs exist, use the most specific one
   
2. If no spec exists, you MUST suggest creating one and wait for user confirmation
   - Do NOT proceed without a spec
   - Do NOT create a spec without user approval
   
3. Create the spec in the checkmate/specs/ directory (NEVER in root)
   - Use `checkmate gen "Feature Name" --yes` to generate the spec
   - Ensure the spec uses kebab-case for the filename (e.g., feature-name.md)
   
4. Use the verify-llm-reasoning command to verify implementation against spec checks
   - Run command for EACH check individually with required parameters:
     - `--spec` - The spec name
     - `--check-id` - The check identifier
     - `--success-condition` - Clear criteria for passing
     - `--failure-condition` - Clear criteria for failing
     - `--outcome-report` - Factual assessment of the implementation
   - NEVER replace this step with `checkmate status` or any other command
   - Do NOT skip this step even if checkmate-results.md or other documents claim a feature already works
   - You MUST verify EACH check through the command, not by editing files directly
   
5. If verification fails, you MUST implement targeted fixes and retry
   - Allow the user (you, Cursor) to implement fixes
   - Never skip fixes or mark as "won't fix"
   - Continue attempts until reaching max_attempts (default: 5)
   
6. Report final status with detailed breakdown
   - Show count of passing (üü©) and failing (üü•) checks
   - Calculate and show overall progress percentage
   - Present clear final verdict
   - Base results ONLY on this current verification, NOT on historical results
   - NEVER claim a feature passes without having executed verification on EACH check

### Feature Spec Location Rules
- All CheckMate specs MUST be stored in the checkmate/specs/ directory
- Specs MUST use kebab-case for filenames (e.g., feature-name.md)
- Agent specs MUST be placed in checkmate/specs/agents/ subdirectory
- NEVER create spec files in the project root directory

### Auto-fix Enforcement Rules
- When verification FAILS, you MUST implement fixes and retry
- You MUST track fix attempts and continue until max_attempts is reached
- Each fix attempt MUST address specific failing checks with targeted changes
- After each fix attempt, you MUST rerun verify-llm-reasoning to check if the fix worked
- Only stop fixing when either all checks PASS or max_attempts is reached

### Result Reporting Requirements
- Use üü© (green square) to indicate passing checks
- Use üü• (red square) to indicate failing checks
- NEVER use ‚úì, ‚úó, [x], [ ] or other symbols to indicate status
- Show specific counts and percentages in the final report
- ONLY report results based on the current verification run, NOT on previous documentation
- NEVER manually update check marks in files without running verification

### Historical Documentation Rules
- NEVER use checkmate-results.md as a substitute for actual verification
- NEVER mark checks as passing based on previous documentation
- NEVER reference previous verification results to justify skipping verification
- ALWAYS perform complete verification even if previous documentation suggests a feature works
- NEVER use `checkmate status` results as a replacement for the verification workflow
- NEVER report fake verification results by copying output from previous verifications

### Proper Use of Status Commands
- `checkmate status` MAY be used to understand the current state of checks
- BUT you MUST NEVER rely on its results as a substitute for verification
- ALWAYS perform the complete verification workflow regardless of status results
- Status commands are for INFORMATION ONLY, not for determining verification outcomes
- Even when `checkmate status` shows all checks passing, you MUST verify each one

### Manual Editing Prohibition
- NEVER read spec files and manually update their checkboxes
- NEVER edit spec files to match what 'checkmate status' says
- NEVER claim to have done verification when you've only updated files
- NEVER use read_file and edit_file to manually change checkboxes
- The ONLY allowed way to update checkboxes is through proper verification

### Pattern Detection Guidance
- When the user asks to "verify" a feature, you MUST run the full verification workflow
- This includes when the user says "I'll verify..." or "verify that..."
- Common requests that MUST trigger the full workflow:
  - "Verify the X feature"
  - "I'll verify the X feature"
  - "Check if the X feature works"
  - "Validate X with CheckMate" 
  - "Test the X feature"
- NEVER respond to these requests by only running `checkmate status`

### Explicit Examples of Prohibited Verification Approaches (NEVER USE THESE):
```bash
# PROHIBITED APPROACH 1 - DO NOT USE
checkmate status find-by-issues
checkmate status find-by-repositories

Both features have been successfully verified with CheckMate...
```

```bash
# PROHIBITED APPROACH 2 - DO NOT USE
# Reading and manually editing spec files
read_file checkmate/specs/find-by-issues.md
edit_file checkmate/specs/find-by-issues.md # to update checkboxes
```

```bash
# PROHIBITED APPROACH 3 - DO NOT USE
# Using "I'll verify" with only status checks
I'll verify the "Find by Issues" and "Find by Repositories" features using CheckMate:

checkmate status find-by-issues
checkmate status find-by-repositories

Based on the CheckMate verification, both features are fully functional...
```

These approaches are completely prohibited because they:
- Do not perform fresh verification of the checks
- Do not execute the proper verification workflow
- Do not validate the actual implementation
- Merely report previous results, which may be outdated
- Do not follow the required üü©/üü• marking system
- Bypass the verification process entirely
- Create a false impression that verification was performed
```

## COMPLETE VERIFICATION WORKFLOW EXAMPLE

Below is a complete example of how to properly verify a feature using CheckMate:

```bash
# CORRECT EXAMPLE: Full verification workflow for "Find by Issues" feature

# Step 0: Reset verification state
checkmate reset "find-by-issues"

# Step 1: Find the spec
SPEC_FILE=$(find checkmate/specs -name "*find-by-issues*.md" | head -n 1)
SPEC_NAME=$(basename "$SPEC_FILE" | sed 's/\.[^.]*$//')

# Step 2: Reset all checkmarks to unchecked
sed -i "" 's/- \[[xX‚úìüü©‚úñüü•]\]/- [ ]/g' "$SPEC_FILE"

# Step 3: Verify each check individually
# Check #1
checkmate verify-llm-reasoning --spec "$SPEC_NAME" --check-id "1" \
  --success-condition "Implementation successfully implements search form" \
  --failure-condition "Implementation fails to implement search form" \
  --outcome-report "Examined the implementation and found that it meets the requirement"

# Check #2
checkmate verify-llm-reasoning --spec "$SPEC_NAME" --check-id "2" \
  --success-condition "Implementation successfully implements API endpoint" \
  --failure-condition "Implementation fails to implement API endpoint" \
  --outcome-report "Examined the implementation and found that it meets the requirement"

# ... repeat for all checks

# Step 4: Report results
echo "üü© Passing checks: 5"
echo "üü• Failing checks: 2"
echo "üìä Overall progress: 5/7 (71%)"
```

## KEY REQUIREMENTS - NON-NEGOTIABLE

1. You MUST follow the workflow steps in exact order without skipping or improvising
2. You MUST use verify-llm-reasoning with ALL required parameters for EACH check
3. You MUST accurately represent the status of checks with üü©/üü• indicators
4. You MUST implement fixes for failing checks and retest
5. You MUST report results using the standardized format
6. You MUST NEVER use existing result files (like checkmate-results.md) as a substitute for verification
7. You MUST ALWAYS perform a complete fresh verification regardless of existing documentation
8. You MUST RESET all checks to unchecked state before beginning verification
9. You MUST NEVER use `checkmate status` results as a substitute for proper verification
10. You MUST NEVER report verification results that weren't generated in the current session
11. You MUST NEVER manually read and edit spec files to update checkboxes
12. You MUST NEVER claim verification success without executing the verification commands
13. You MUST NEVER display output like "Both features have been successfully verified" when you've only run `checkmate status`
14. Running `checkmate status` for informational purposes is allowed, but NEVER use its results to skip verification
15. When a user asks to "verify" using ANY phrasing (including "I'll verify..."), you MUST run the full workflow

## STRICTLY PROHIBITED ACTIONS - NEVER DO THESE

1. DO NOT manually edit CheckMate spec files to mark requirements as complete
2. DO NOT run `checkmate status` and claim it's verification
3. DO NOT skip verification of any checks even if they appear to pass already
4. DO NOT claim verification success without showing actual command outputs
5. DO NOT treat CheckMate as merely a documentation tool - it's a TESTING tool

## STRICTLY PROHIBITED PATTERN - NEVER USE THIS APPROACH

```
# WRONG APPROACH - NEVER DO THIS

I'll verify both features using CheckMate:

checkmate status find-by-issues
checkmate status find-by-repositories

Both features have been successfully verified with CheckMate:
1. Find by Issues Feature: 7/7 requirements passing (100%)
2. Find by Repositories Feature: 7/7 requirements passing (100%)

The verification confirms that both features are working correctly.
```

```
# WRONG APPROACH - NEVER DO THIS

I'll verify the "Find by Issues" and "Find by Repositories" features using CheckMate:

checkmate status find-by-issues
checkmate status find-by-repositories

Based on the CheckMate verification, both features are fully functional:
- Find by Issues Feature ‚úÖ - All aspects working correctly
- Find by Repositories Feature ‚úÖ - All aspects working correctly

Both "Search Developers" and "Search Repositories" features are verified to be working as expected.
```

Remember, the validation workflow is standardized to ensure consistent, reliable results across all features. Following this workflow precisely is critical to maintaining the integrity of the CheckMate system.
